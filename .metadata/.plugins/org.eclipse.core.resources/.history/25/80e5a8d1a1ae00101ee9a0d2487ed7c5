package com.example.springboot.webflux.app.controllers;

import java.io.File;
import java.time.Duration;
import java.util.Date;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.codec.multipart.FilePart;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.bind.support.SessionStatus;
import org.thymeleaf.spring6.context.webflux.ReactiveDataDriverContextVariable;

import com.example.springboot.webflux.app.SpringBootWebfluxApplication;
import com.example.springboot.webflux.app.models.documents.Categoria;
import com.example.springboot.webflux.app.models.documents.Producto;
import com.example.springboot.webflux.app.models.services.ProductoService;

import jakarta.validation.Valid;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@SessionAttributes("producto")
@Controller
public class ProductoController {

    private final SpringBootWebfluxApplication springBootWebfluxApplication;

	@Autowired
	private ProductoService service;
	
	@Value("${config.uploads.path}")
	private String ruta;

	private static final Logger log = LoggerFactory.getLogger(SpringBootWebfluxApplication.class);

    ProductoController(SpringBootWebfluxApplication springBootWebfluxApplication) {
        this.springBootWebfluxApplication = springBootWebfluxApplication;
    }
    
    @ModelAttribute("categorias")
    public Flux<Categoria> categorias(){
    		return service.findAllCategoria();
    }
    
    @GetMapping("/ver/{id}")
    public Mono<String> ver(@PathVariable String id, Model model){
		return service.findById(id)
			.doOnNext(prod -> {
				model.addAttribute("producto", prod);
				model.addAttribute("titulo", "Detalle Producto");
			})
			.switchIfEmpty(Mono.just(new Producto()))
			.flatMap(p -> {
				if(p.getId()==null) {
					return Mono.error(new InterruptedException("No existe el producto"));
				}
				return Mono.just(p);
			})
			.then(Mono.just("ver"))
			.onErrorResume(ex -> Mono.just("redirect:/listar?error=No+existe+el+producto"));

	}
	

	@GetMapping({"/listar", "/"})
	public Mono<String> listar(Model model) {
		Flux<Producto> productos = service.findAllConNombreUpperCase();
		
		productos.subscribe(prod -> log.info(prod.getNombre()));
		
		model.addAttribute("productos", productos);
		model.addAttribute("titulo", "Listado de productos");
		return Mono.just("listar");
	}
	
	@GetMapping("/form")
	public Mono<String> crear(Model model){
		model.addAttribute("producto", new Producto());
		model.addAttribute("titulo", "Formulario de Producto");
		model.addAttribute("boton", "Crear");

		return Mono.just("form");
	}
	
	@PostMapping("/form")
	public Mono<String> guardar(@Valid Producto producto, BindingResult result, Model model, @RequestPart(name="fotico") FilePart fotico ,SessionStatus status){
		if(result.hasErrors()) {
			model.addAttribute("titulo", "Errores en formulario de Producto");
			model.addAttribute("boton", "Guardar");
			return Mono.just("form");
		}else {
			status.setComplete();
			
			Mono<Categoria> categoria = service.findCategoriaById(producto.getCategoria().getId());
			
			return categoria.flatMap(c -> {
				if(producto.getCreateAt()==null) {
					producto.setCreateAt(new Date());
				}
				
				if(!fotico.filename().isEmpty()) {
					producto.setFoto(UUID.randomUUID().toString() + "-" + fotico.filename()
						.replace(" ", "")
						.replace(":", "")
						.replace("\\", "")
					);
				}
				
				producto.setCategoria(c);
				return service.save(producto);
			})
			.doOnNext(p -> {
				log.info("Producto guardado: "+p.getNombre() + " ID: "+ p.getId());
				log.info("Categoria guardado: "+p.getCategoria().getNombre() + " ID: "+ p.getCategoria().getId());
			})
			.flatMap(p -> {
				if(!fotico.filename().isEmpty()) {
//					return fotico.transferTo(new File("C://Users/JuanIgnacioSilvaLagu/Documents/SpringWebFlux/uploads//" + p.getFoto()));
					return fotico.transferTo(new File(ruta + p.getFoto()));
				}
				
				return Mono.empty();
			})
			.thenReturn("redirect:/listar?success=Producto+guardado+con+exito");
		}
	}
	
	@GetMapping("/form-v2/{id}")
	public Mono<String> editarV2(@PathVariable String id, Model model){
		return service.findById(id).doOnNext(prod -> {
			model.addAttribute("producto", prod);
			model.addAttribute("titulo", "Editar Producto");
			model.addAttribute("boton", "Editar");

			log.info("Producto: "+prod.getNombre());
		})
		.defaultIfEmpty(new Producto())
		.flatMap(p -> {
			if(p.getId()==null) {
				return Mono.error(new InterruptedException("No existe el producto"));
			}
			
			return Mono.just(p);
		})
		.then(Mono.just("form"))
		.onErrorResume(ex -> Mono.just("redirect:/listar?error=No+existe+el+producto"));
	}
	
	@GetMapping("/form/{id}")
	public Mono<String> editar(@PathVariable String id, Model model){
		Mono<Producto> monoProducto = service.findById(id).doOnNext(prod -> {
			log.info("Producto: "+prod.getNombre());
		}).defaultIfEmpty(new Producto());
		
		model.addAttribute("producto", monoProducto);
		model.addAttribute("titulo", "Editar Producto");
		model.addAttribute("boton", "Editar");

		return Mono.just("form");
	}
	
	@GetMapping("/delete/{id}")
	public Mono<String> eliminar(@PathVariable String id){
		return service.findById(id)
			.defaultIfEmpty(new Producto())
			.flatMap(p -> {
				if(p.getId()==null) {
					return Mono.error(new InterruptedException("No existe el producto a eliminar"));
				}
				return Mono.just(p);
			})
			.flatMap(p -> {
				log.info("Producto ELIMINADO: "+p.getNombre());
				return service.delete(p);
			})
			.then(Mono.just("redirect:/listar?success=Producto+eliminado+con+exito"))
			.onErrorResume(ex -> Mono.just("redirect:/listar?error=No+existe+el+producto+A+ELIMINAR"));
	}
	
	@GetMapping("/listar-data-driver")
	public String listarDataDriver(Model model) {
		Flux<Producto> productos = service.findAllConNombreUpperCase().delayElements(Duration.ofSeconds(1));
		
		productos.subscribe(prod -> log.info(prod.getNombre()));
		
		model.addAttribute("productos", new ReactiveDataDriverContextVariable( productos,2));
		model.addAttribute("titulo", "Listado de productos");
		return "listar";
	}
	
	@GetMapping("/listar-full")
	public String listarFull(Model model) {
		Flux<Producto> productos = service.findAllConNombreUpperCaseRepeat();
		
		model.addAttribute("productos", productos);
		model.addAttribute("titulo", "Listado de productos");
		return "listar";
	}
	
	@GetMapping("/listar-chunked")
	public String listarChunked(Model model) {
		//OJO agregar spring.thymeleaf.reactive.max-chunk-size=1024 y spring.thymeleaf.reactive.chunked-mode-view-names=listar-chunked en application.properties
		Flux<Producto> productos = service.findAllConNombreUpperCaseRepeat();
		
		model.addAttribute("productos", productos);
		model.addAttribute("titulo", "Listado de productos");
		return "listar-chunked";
	}
	
	
}
