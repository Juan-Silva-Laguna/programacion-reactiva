package com.example.springboot.webflux.app.controllers;

import java.time.Duration;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.thymeleaf.spring6.context.webflux.ReactiveDataDriverContextVariable;

import com.example.springboot.webflux.app.SpringBootWebfluxApplication;
import com.example.springboot.webflux.app.models.documents.Producto;
import com.example.springboot.webflux.app.models.services.ProductoService;

import reactor.core.publisher.Flux;

@Controller
public class ProductoController {

    private final SpringBootWebfluxApplication springBootWebfluxApplication;

	@Autowired
	private ProductoService service;

	private static final Logger log = LoggerFactory.getLogger(SpringBootWebfluxApplication.class);

    ProductoController(SpringBootWebfluxApplication springBootWebfluxApplication) {
        this.springBootWebfluxApplication = springBootWebfluxApplication;
    }

	@GetMapping({"/listar", "/"})
	public String listar(Model model) {
		Flux<Producto> productos = service.findAllConNombreUpperCase();
		
		productos.subscribe(prod -> log.info(prod.getNombre()));
		
		model.addAttribute("productos", productos);
		model.addAttribute("titulo", "Listado de productos");
		return "listar";
	}
	
	@GetMapping("/listar-data-driver")
	public String listarDataDriver(Model model) {
		Flux<Producto> productos = service.findAllConNombreUpperCase().delayElements(Duration.ofSeconds(1));
		
		productos.subscribe(prod -> log.info(prod.getNombre()));
		
		model.addAttribute("productos", new ReactiveDataDriverContextVariable( productos,2));
		model.addAttribute("titulo", "Listado de productos");
		return "listar";
	}
	
	@GetMapping("/listar-full")
	public String listarFull(Model model) {
		Flux<Producto> productos = service.findAllConNombreUpperCaseRepeat();
		
		model.addAttribute("productos", productos);
		model.addAttribute("titulo", "Listado de productos");
		return "listar";
	}
	
	@GetMapping("/listar-chunked")
	public String listarChunked(Model model) {
		//OJO agregar spring.thymeleaf.reactive.max-chunk-size=1024 y spring.thymeleaf.reactive.chunked-mode-view-names=listar-chunked en application.properties
		Flux<Producto> productos = service.findAll()
				.map(producto -> {
					producto.setNombre(producto.getNombre().toUpperCase());
					return producto;
				}).repeat(5000);
		
		model.addAttribute("productos", productos);
		model.addAttribute("titulo", "Listado de productos");
		return "listar-chunked";
	}
	
	
}
